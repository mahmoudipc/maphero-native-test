name: ios-ci

on:
  push:
    branches:
      - main
  # workflow_run:
  #   workflows: ["clear_cache"]
  #   types:
  #     - completed
  # workflow_dispatch:
  #   inputs:
  #     release:
  #       type: choice
  #       default: no
  #       options:
  #         - full
  #         - pre
  #         - no
  #       description: Whether to make a release, choose full release (uses platform/ios/VERSION) or pre-release
  #     pre_release_version:
  #       type: string
  #       default: ''
  #       description: Version (only for pre-releases)
  # push:
  #   branches:
  #     - main
  #     - ios-*.*.x
  #   tags:
  #     - 'ios-*'
  
  # pull_request:
  #   branches:
  #     - '*'

permissions:
  contents: write         # allow making a release

jobs:
  # pre_job:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     should_skip: ${{ github.event_name != 'workflow_dispatch' && steps.changed-files-yaml.outputs.ios_any_modified != 'true' }}
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: recursive

  #     - name: Get all iOS files that have changed
  #       if: github.event_name != 'workflow_dispatch'
  #       id: changed-files-yaml
  #       uses: tj-actions/changed-files@v44
  #       with:
  #         files_yaml_from_source_file: .github/changed-files.yml

  #     - name: Run step if test file(s) change
  #       if: steps.changed-files-yaml.outputs.ios_any_modified == 'true'  
  #       run: |
  #         echo "One or more iOS file(s) has changed."
  #         echo "List of changes: ${{ steps.changed-files-yaml.outputs.ios_all_changed_files }}"
      
  ios-build:
    # needs: pre_job
    # if: needs.pre_job.outputs.should_skip != 'true'
    runs-on: [self-hosted, macOS, ARM64]
    concurrency:
      # cancel jobs on PRs only
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}
    env:
      BUILDTYPE: Debug
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
    defaults:
      run:
        working-directory: platform/ios
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Cache Bazel
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-bazel-${{ hashFiles('.bazelversion', '.bazelrc', 'WORKSPACE', 'WORKSPACE.bazel', 'MODULE.bazel') }}
          restore-keys: |
            ${{ runner.os }}-bazel-
          path: ~/.cache/bazel

      - name: Build Example (Swift) App
        run: bazel build //platform/ios/app-swift:MapLibreApp --//:renderer=metal

      - name: Check debug symbols
        run: bazel run //platform:check-public-symbols --//:renderer=metal

      - name: Lint plist files
        run: bazel run //platform/ios:lint-plists --//:renderer=metal

      - name: Running iOS tests
        run: bazel test //platform/ios/test:ios_test --test_output=errors --//:renderer=metal

      - name: Running iOS UI tests (Address+UB Sanitizer)
        run: bazel test //platform/ios/iosapp-UITests:uitest --test_output=errors --//:renderer=metal --features=include_clang_rt --copt=-fsanitize=undefined --linkopt=-fsanitize=undefined --copt=-fsanitize-recover=null --linkopt=-fsanitize-recover=null

      # render test

      - name: Build RenderTest .ipa and .xctest
        run: |
          set -e
          bazel run //platform/ios:xcodeproj --@rules_xcodeproj//xcodeproj:extra_common_flags="--//:renderer=metal"
          build_dir="$(mktemp -d)"
          xcodebuild build-for-testing  -scheme RenderTest -project MapLibre.xcodeproj -derivedDataPath "$build_dir"
          render_test_app_dir="$(dirname "$(find "$build_dir" -name RenderTestApp.app)")"
          cd "$render_test_app_dir"
          mkdir Payload
          mv RenderTestApp.app Payload
          zip -r RenderTestApp.zip Payload
          mv RenderTestApp.zip RenderTestApp.ipa
          cd Payload/RenderTestApp.app/PlugIns
          zip -r "$render_test_app_dir"/RenderTest.xctest.zip RenderTest.xctest
          echo render_test_artifacts_dir="$render_test_app_dir" >> "$GITHUB_ENV"

      - uses: actions/upload-artifact@v4
        with:
          name: ios-render-test
          retention-days: 3
          if-no-files-found: error
          path: |
            ${{ env.render_test_artifacts_dir }}/RenderTest.xctest.zip
            ${{ env.render_test_artifacts_dir }}/RenderTestApp.ipa

      # C++ unit tests
      
      - name: Build CppUnitTests .ipa and .xctest
        run: |
          set -e
          bazel run --//:renderer=metal //platform/ios:xcodeproj
          build_dir="$(mktemp -d)"
          xcodebuild build-for-testing  -scheme CppUnitTests -project MapLibre.xcodeproj -derivedDataPath "$build_dir"
          ios_cpp_test_app_dir="$(dirname "$(find "$build_dir" -name CppUnitTestsApp.app)")"
          cd "$ios_cpp_test_app_dir"
          mkdir Payload
          mv CppUnitTestsApp.app Payload
          zip -r CppUnitTestsApp.zip Payload
          mv CppUnitTestsApp.zip CppUnitTestsApp.ipa
          cd Payload/CppUnitTestsApp.app/PlugIns
          zip -r "$ios_cpp_test_app_dir"/CppUnitTests.xctest.zip CppUnitTests.xctest
          echo ios_cpp_test_artifacts_dir="$ios_cpp_test_app_dir" >> "$GITHUB_ENV"

      - uses: actions/upload-artifact@v4
        with:
          name: ios-cpp-unit-tests
          retention-days: 3
          if-no-files-found: error
          path: |
            ${{ env.ios_cpp_test_artifacts_dir }}/CppUnitTests.xctest.zip
            ${{ env.ios_cpp_test_artifacts_dir }}/CppUnitTestsApp.ipa

      # Size test (Bloaty)

      - name: Build dynamic library for size test (Bloaty)
        run: |
          bazel build //platform/ios:MapLibre.dynamic --//:renderer=metal --compilation_mode="opt" --copt -g --copt="-Oz" --strip never --output_groups=+dsyms --apple_generate_dsym
          bazel_bin="$(bazel info --compilation_mode="opt" bazel-bin)"
          unzip "$bazel_bin"/platform/ios/MapLibre.dynamic.xcframework.zip
          cp "$bazel_bin"/platform/ios/MapLibre.dynamic_dsyms/MapLibre_ios_device.framework.dSYM/Contents/Resources/DWARF/MapLibre_ios_device MapLibre_DWARF
          cp MapLibre.xcframework/ios-arm64/MapLibre.framework/MapLibre MapLibre_dynamic

      - name: Upload size test as artifact (Bloaty)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ios-size-test-files
          retention-days: 3
          if-no-files-found: error
          path: |
            platform/ios/MapLibre_DWARF
            platform/ios/MapLibre_dynamic

      - name: Build DocC documentation
        working-directory: .
        run: |
          HOSTING_BASE_PATH="maplibre-native/ios/latest" platform/ios/scripts/docc.sh

      - name: Deploy DocC documentation (main) ðŸš€
        if: github.ref == 'refs/heads/main'
        uses: JamesIves/github-pages-deploy-action@v4.6.3
        with:
          branch: gh-pages
          folder: build/docs
          target-folder: ios/latest/

  ios-release:
    runs-on: macos-14
    needs: ios-build
    if: github.ref == 'refs/heads/main' || github.event.inputs.release == 'pre'
    defaults:
      run:
        working-directory: platform/ios
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: VERSION file changed
        id: version-file-ios-changed
        uses: tj-actions/changed-files@v44
        with:
          files: platform/ios/VERSION

      # Make Metal XCFramework release
      - name: Should make release?
        if: |
          github.event.inputs.release == 'full' || github.event.inputs.release == 'pre' ||
          (github.event_name == 'push' && steps.version-file-ios-changed.outputs.any_changed == 'true')
        run: |
          echo "Prepare version for release"
          mkdir -p build/ios/MapLibre/
          cp -r platform/ios/MapLibre.xcframework build/ios/MapLibre/
          echo "Full version"
          if [ "${{ github.event.inputs.release }}" == "full" ]; then
            build_version=$(< platform/ios/VERSION)
            xcrun altool --upload-app --type ios --file build/ios/MapLibre.xcframework.zip --username ${{ secrets.APP_STORE_CONNECT_USERNAME }} --password ${{ secrets.APP_STORE_CONNECT_PASSWORD }}
          fi
          
      - name: Upload version artifact
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release == 'pre'
        uses: actions/upload-artifact@v4
        with:
          name: ios-pre-release-artifact
          path: build/ios/MapLibre.xcframework.zip